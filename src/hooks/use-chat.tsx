'use client';

import { createContext, useContext, useState } from "react";

interface messagesProp {
    content: string,
    id: 'user' | 'ai'
}

interface contextProps {
    isThinking: boolean,
    submitForm: (msg: string) => Promise<void>,
    messages: messagesProp[] 

}
const context = createContext< contextProps | null>(null)

const wait = async (ms: number) => {
    return new Promise(resolve => setTimeout(resolve, ms))
}

const ChatProvider = ({ children } : {
    children: React.ReactNode
}) => {

    /* isThinking is used to track if message is being fetched from backend
        so that loading indicator will be shown.
    */
    const [isThinking, setIsThinking] = useState<boolean>(false);
    const [Messages, setMessages] = useState<messagesProp[]>([]);

    const generateMessage = () => {
        return {
            content: 'This is generated by ai',
            id: 'ai'
        }
    }
    const submitForm = async (msg: string) => {

        if(isThinking) return;
        setIsThinking(true);
        console.log('sending message')
        setMessages(prev => [...prev, {
            content: msg,
            id: 'user'
        }])
        await wait(5000);
        setIsThinking(false);
        const value = generateMessage()
        setMessages(prev => [...prev, value as messagesProp])
    }

    const value: contextProps = {
        isThinking,
        submitForm,
        messages: Messages
    }
  return (
    <context.Provider 
        value={value}
    >
        {children}
    </context.Provider>
  )
}

export default ChatProvider;

export const useChatProvider = () : contextProps=> {
    const Context = useContext(context);
    if(Context === null) {
        throw new Error('Error')
    };
    return Context as contextProps;
}